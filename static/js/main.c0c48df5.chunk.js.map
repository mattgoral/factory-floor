{"version":3,"sources":["components/part.js","App.js","serviceWorker.js","index.js"],"names":["Part","props","react_default","a","createElement","className","partState","type","Object","keys","testState","map","test","key","state","partDefinitions","A1","B1","C1","D1","E1","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","orderObjects","forEach","order","index","push","newPartObj","orders","completedOrders","machines","vibration","thermal","humidity","radiation","nextOrder","bind","assertThisInitialized","part","initialTestState","machine","incompleteTestName","some","testName","_this2","length","newPart","shift","firstMachineForNewPart","completedTests","includes","nextPart","nextTest","console","log","setState","_this3","newOrders","m","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0c48df5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Part = props => {\n\n  function partTestState(state) {\n    return state ? 'complete' : 'incomplete';\n  }\n\n  return (\n    <div className=\"part\">\n      <div className=\"part-name\">\n        { props.partState.type }\n      </div>\n      { Object.keys(props.partState.testState).map(test => {\n        return (\n          <div className=\"part-test\" key={ test }>\n            <div className={\"part-test-state \" + partTestState(props.partState.testState[test])}></div>\n            <div className=\"part-test-name\">{ test }</div>\n          </div>\n        );\n      })}\n    </div>\n  )\n\n}\n\nexport default Part;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Part from './components/part';\n\nconst partDefinitions = {\n  A1: ['vibration', 'thermal', 'radiation'],\n  B1: ['vibration', 'radiation'],\n  C1: ['thermal', 'radiation', 'humidity'],\n  D1: ['vibration', 'thermal', 'radiation', 'humidity'],\n  E1: ['humidity']\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let orders = ['A1', 'C1', 'E1', 'D1', 'C1', 'B1', 'E1'];\n    let orderObjects = [];\n\n    orders.forEach((order, index) => {\n      orderObjects.push(this.newPartObj(order, index));\n    });\n\n    this.state = {\n      orders: orderObjects,\n      completedOrders: [],\n      machines: {\n        vibration: [],\n        thermal: [],\n        humidity: [],\n        radiation: []\n      }\n    }\n\n    this.nextOrder = this.nextOrder.bind(this);\n  }\n\n  newPartObj(part, key) {\n    let machines = partDefinitions[part];\n    let initialTestState = {};\n    machines.forEach(machine => {\n      initialTestState[machine] = false;\n    });\n    return { type: part, testState: initialTestState, key: key };\n  }\n\n  nextTest(partState) {\n    let incompleteTestName = '';\n    let incompleteTest = Object.keys(partState.testState).some(testName => {\n      incompleteTestName = testName;\n      return partState.testState[testName] === false;\n    });\n\n    if(incompleteTest) {\n      partState.testState[incompleteTestName] = true;\n      this.state.machines[incompleteTestName].push(partState);\n    } else {\n      this.state.completedOrders.push(partState);\n    }\n  }\n\n  nextOrder() {\n    if(this.state.orders.length > 0) {\n      let outstandingOrders = this.state.orders;\n      let newPart = outstandingOrders.shift();\n      let firstMachineForNewPart = partDefinitions[newPart.type][0];\n      this.state.machines[firstMachineForNewPart].push(newPart);\n    }\n\n    let completedTests = [];\n    Object.keys(this.state.machines).forEach(machine => {\n      if(this.state.machines[machine].length > 0 && !completedTests.includes(this.state.machines[machine][0])) {\n        let nextPart = this.state.machines[machine].shift();\n        completedTests.push(nextPart);\n        this.nextTest(nextPart);\n      };\n    });\n\n    console.log(this.state);\n    this.setState(this.state);\n  }\n\n  render() {\n    let newOrders = this.state.orders.map(order => {return <Part partState={order} key={order.key}/>});\n    let machines = Object.keys(this.state.machines).map(machine => {\n      return (\n        <div className={\"machine \" + machine} key={machine}>\n          <div className=\"machine-name section-title\">\n            { machine }\n          </div>\n          <div className=\"machine-parts\">\n            { this.state.machines[machine].map(m => {\n              return <Part partState={m} key={m.key}/>\n            }) }\n          </div>\n        </div>\n      )\n    });\n    let completedOrders = this.state.completedOrders.map(order => {return <Part partState={order} key={order.key}/>});\n    return (\n      <div className=\"App\">\n        <button onClick={this.nextOrder} className=\"next-step\">Next Step</button>\n        <section className=\"new-orders\">\n          <div className=\"section-title\">New Orders</div>\n          <div className=\"flex\">{ newOrders }</div>\n        </section>\n        <section className=\"machines\">\n          { machines }\n        </section>\n        <section className=\"completed-orders\">\n          <div className=\"section-title\">Completed Orders</div>\n          <div className=\"flex\">{ completedOrders }</div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}